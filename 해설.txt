1. Apollo Server 만들기

* Apollo Server 는 Express, Koa, Hapi, Fastify, Amazon Lambda 등을 위한 TypeScript GraphQL 서버입니다.
* server.js 파일 생성 (/server.js)
* 공식 문서에 따라 server를 생성 후, 실행시켜 줍니다.
- Apollo Server 공식문서 참고 - https://www.apollographql.com/docs/apollo-server/

2. dotenv

* Dotenv는 환경 변수를 .env 파일에서 process.env.변수명으로 로드하기 위한 zero-dependency 모듈입니다.
* 필요한 모든 곳에서 환경 변수를 로드하기 위해, app의 가장 처음부분에서 dotenv를 실행할 필요가 있습니다.
* server.js 파일의 첫 부분에 require('dotenv').config(); 혹은 import "dotenv/config";(ES6 이상)를 추가합니다.

3. Architecture

* 솔루션에서는 divide and conquer를 위해 schema.js 파일을 생성 (/schema.js) 후, 모든 폴더의 모든 파일 중
  .typeDefs.js, .resolvers.js 로 끝나는 파일(${__dirname}/**/*.~)들을 loadFilesSync 를 이용해 각각 
  loadedTypes, loadedResolvers 변수에 불러옵니다.
* 불러온 파일들을 mergeTypeDefs, mergeResolvers를 이용해 각각 merge 후, typeDefs, resolvers 변수에 넣어줍니다.
* makeExecutableSchema를 이용해 schema 를 생성 후, export default 합니다.
* schema 를 server.js에서 import 후, 아래와 같이 수정합니다.
* const server = new ApolloServer({ schema })
- GraphQL Tools 공식문서 참고 - https://the-guild.dev/graphql/tools/docs/introduction

4. nodemon Setup

* nodemon은 파일 변경이 감지되면 노드 응용 프로그램을 자동으로 재시작하여, Node.js 기반 응용 프로그램을 개발할 때 용이합니다.
* 이번 프로젝트를 진행할 때, 코드를 수정할 때마다 서버가 매번 자동으로 재시작되기를 원하기 때문에 사용합니다.

5. Babel Setup

* Babel은 2015+의 ECMAScript(European Computer Manufacturers Association Script)코드, 
  쉽게 말해 JavaScript 기반 언어의 코드를 자바스크립트의 하위 호환 버전으로 변환하는 데 주로 사용되는 toolchain입니다.
* 이번 프로젝트에서 최신 자바스크립트 문법을 사용하고 싶기 때문에 사용합니다.
* 설정을 위해 babel.config.json 파일 생성 후, (/babel.config.json) { "presets": ["@babel/preset-env"] } 을 작성합니다.
* nodemon을 통해 babel-node 를 실행하기 위해 package.json파일의 scripts를 수정합니다.
* "dev": "nodemon --exec babel-node server.js
- Babel 공식문서 참고 - https://babeljs.io/docs/

6. Prisma

* Prisma는 차세대 Node.js 및 TypeScript ORM(Object Relational Mapping)으로, 
   개발자가 PostgreSQL, MySQL, SQL Server, SQLite과 MongoDB용 오픈 소스 데이터베이스 
   도구를 사용하여 더 빠르게 빌드하고 오류를 줄이는데 도움을 줍니다.
* 어려운 말처럼 보이지만, JavaScript or TypeScript와 데이터베이스 사이에 다리를 놓아준다고 생각하면 좋습니다.
* Prisma의 도움을 받아 우리는 따로 SQL 코드를 작성하지 않고도 JavaScript or TypeScript 만으로 데이터베이스와 상호작용 할 수 있습니다.
- Prisma 공식문서 참고 - https://www.prisma.io/docs
* 강의 내용 #3.4 Prisma Setup, #3.5 Migrate dev를 진행하는 것으로 Prisma Client를 생성합니다.
* client.js 파일을 생성 (/client.js) 후, 생성된 Prisma Client로 client를 생성합니다.
* const client = new PrismaClient()

7. test typeDefs, resolvers 만들기

* 솔루션에서는 test 폴더 생성 후, 폴더 안에 test.resolvers.js, test.typeDefs.js 파일을 (/test, /test/resolvers.js, /test/typeDefs.js) 작성했습니다.
* Apollo Server를 실행 시, 선언 된 Query가 적어도 하나 존재하지 않는다면 Error: Query root type must be provided. 에러가 발생합니다.
* 따라서 서버를 실행하기 위해 test.typeDefs.js 파일에 hello Query의 타입 을 작성, test.resolvers.js 파일에
   hello Query 가 'Hello, Nomad Coders Challenge!' 를 반환하도록 하는 resolver를 작성합니다.
* GraphQL의 resolvers 는 선택적으로 4개의 위치 인수를 받습니다. (parent, args, context, info)
* 후반 내용을 위해서 각 위치 인수가 어떤 역할을 하는지 공식문서를 꼭 한번 읽어보시고 넘어가시길 권장드립니다.
- Apollo Server Resolvers 공식문서 참고 - https://www.apollographql.com/docs/apollo-server/data/resolvers/